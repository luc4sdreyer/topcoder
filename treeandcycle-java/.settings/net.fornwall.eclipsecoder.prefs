eclipse.preferences.version=1
problemStatement=TreeAndCycle.html
problemStatementXml=<?xml version\="1.0" encoding\="UTF-8"?>\n<java version\="1.8.0_31" class\="java.beans.XMLDecoder">\n <object class\="net.fornwall.eclipsecoder.stats.ProblemStatement" id\="ProblemStatement0">\n  <void property\="className">\n   <string>TreeAndCycle</string>\n  </void>\n  <void property\="contestName">\n   <string>Single Round Match 693 - 1000 points</string>\n  </void>\n  <void property\="htmlDescription">\n   <string>&lt;html&gt;&lt;head&gt;&lt;title&gt;TreeAndCycle&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor\=&quot;\#000000&quot; text\=&quot;\#ffffff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;&lt;h3&gt;Problem Statement&lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;\#160;&amp;\#160;&amp;\#160;&amp;\#160;&lt;/td&gt;&lt;td&gt;\nYou are given an undirected tree with n vertices numbered 0 through n-1.\nFor each i between 0 and n-2, inclusive, the vertices (i+1) and &lt;b&gt;pre&lt;/b&gt;[i] are connected by an edge.\nWe ensure &lt;b&gt;pre&lt;/b&gt;[i] &amp;\#60; i+1, so the edges are guaranteed to form a tree.&lt;br&gt;&lt;/br&gt;\n\nA cycle graph is an undirected graph with n vertices and n edges in which the edges form a single cycle through all vertices.\nFormally, a graph with n vertices and n edges is a cycle graph if there exists a permutation p[0], p[1],..., p[n-1] of its vertices such that the n edges are the edges (p[0],p[1]), (p[1],p[2]), (p[2],p[3]), ..., (p[n-2],p[n-1]), and (p[n-1],p[0]).&lt;br&gt;&lt;/br&gt;\n\nYou want to transform the given tree into an arbitrary cycle graph by adding and/or removing edges.\nRemoving the edge (i+1,&lt;b&gt;pre&lt;/b&gt;[i]) costs &lt;b&gt;costE&lt;/b&gt;[i].\nEach vertex x has an associated weight &lt;b&gt;costV&lt;/b&gt;[x].\nThe cost of adding a new edge (x,y) is &lt;b&gt;costV&lt;/b&gt;[x]+&lt;b&gt;costV&lt;/b&gt;[y].\nThe edges added in this way cannot be removed.\nNote that all the edges are undirected.&lt;br&gt;&lt;/br&gt;\n\nYou are given the following int[]s\:\n&lt;ul&gt;\n&lt;li&gt;The int[] &lt;b&gt;costV&lt;/b&gt; with n elements that contains the weight of each vertex. Remember that these weights are used to compute the costs of adding new edges.&lt;/li&gt;\n&lt;li&gt;The int[] &lt;b&gt;pre&lt;/b&gt; with n-1 elements that describes the shape of the tree.&lt;/li&gt;\n&lt;li&gt;The int[] &lt;b&gt;costE&lt;/b&gt; with n-1 elements\: the costs of removing the edges described by &lt;b&gt;pre&lt;/b&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\nCompute and return the smallest total cost of changing the given tree into some cycle graph.&lt;br&gt;&lt;/br&gt;\n \n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;&lt;h3&gt;Definition&lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;\#160;&amp;\#160;&amp;\#160;&amp;\#160;&lt;/td&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Class\:&lt;/td&gt;&lt;td&gt;TreeAndCycle&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Method\:&lt;/td&gt;&lt;td&gt;minimize&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Parameters\:&lt;/td&gt;&lt;td&gt;int[], int[], int[]&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Returns\:&lt;/td&gt;&lt;td&gt;int&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Method signature\:&lt;/td&gt;&lt;td&gt;int minimize(int[] costV, int[] pre, int[] costE)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;(be sure your method is public)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;&lt;h3&gt;Limits&lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;\#160;&amp;\#160;&amp;\#160;&amp;\#160;&lt;/td&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Time limit (s)\:&lt;/td&gt;&lt;td&gt;2.000&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Memory limit (MB)\:&lt;/td&gt;&lt;td&gt;256&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Stack limit (MB)\:&lt;/td&gt;&lt;td&gt;256&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;&lt;h3&gt;Constraints&lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; valign\=&quot;top&quot;&gt;-&lt;/td&gt;&lt;td&gt;n will be between 3 and 100, inclusive.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; valign\=&quot;top&quot;&gt;-&lt;/td&gt;&lt;td&gt;&lt;b&gt;costV&lt;/b&gt; will contain exactly n elements.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; valign\=&quot;top&quot;&gt;-&lt;/td&gt;&lt;td&gt;&lt;b&gt;pre&lt;/b&gt; will contain exactly n-1 elements.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; valign\=&quot;top&quot;&gt;-&lt;/td&gt;&lt;td&gt;For each valid i, 0 &amp;\#60;\= &lt;b&gt;pre&lt;/b&gt;[i]  &amp;\#60; i+1 holds.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; valign\=&quot;top&quot;&gt;-&lt;/td&gt;&lt;td&gt;&lt;b&gt;costE&lt;/b&gt; will contain exactly n-1 elements.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; valign\=&quot;top&quot;&gt;-&lt;/td&gt;&lt;td&gt;Elements of &lt;b&gt;costV&lt;/b&gt; and &lt;b&gt;costE&lt;/b&gt; will be between 1 and 10,000, inclusive.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;&lt;h3&gt;Examples&lt;/h3&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; nowrap\=&quot;true&quot;&gt;0)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;\#160;&amp;\#160;&amp;\#160;&amp;\#160;&lt;/td&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{7,2,5,8}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{0,1,2}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{6,4,3}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;Returns\: 15&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;This graph is a path with edges (0,1),(1,2),(2,3). An optimal solution is to add edge (0,3) to make it a cycle. The cost is &lt;b&gt;costV&lt;/b&gt;[0] + &lt;b&gt;costV&lt;/b&gt;[3] \= 15.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; nowrap\=&quot;true&quot;&gt;1)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;\#160;&amp;\#160;&amp;\#160;&amp;\#160;&lt;/td&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{100,5,9,8}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{0,0,0}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{6,2,2}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;Returns\: 32&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;An optimal solution is to remove edge (0,3), and add edges (1,3), (2,3).\n&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align\=&quot;center&quot; nowrap\=&quot;true&quot;&gt;2)&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&amp;\#160;&amp;\#160;&amp;\#160;&amp;\#160;&lt;/td&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{10,20,30,40,50,60,70,80,90}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{0,1,2,2,3,4,5,7}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;{5,15,25,35,45,55,65,75}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;pre&gt;Returns\: 205&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;table&gt;&lt;tr&gt;&lt;td colspan\=&quot;2&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;This problem statement is the exclusive and proprietary property of TopCoder, Inc.  Any unauthorized use or reproduction of this information without the prior written consent of TopCoder, Inc. is strictly prohibited.  (c)2003, TopCoder, Inc.  All rights reserved.  &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>\n  </void>\n  <void property\="methodName">\n   <string>minimize</string>\n  </void>\n  <void property\="parameterNames">\n   <void method\="add">\n    <string>costV</string>\n   </void>\n   <void method\="add">\n    <string>pre</string>\n   </void>\n   <void method\="add">\n    <string>costE</string>\n   </void>\n  </void>\n  <void property\="parameterTypes">\n   <void method\="add">\n    <class>[Ljava.lang.Integer;</class>\n   </void>\n   <void method\="add">\n    <class>[Ljava.lang.Integer;</class>\n   </void>\n   <void method\="add">\n    <class>[Ljava.lang.Integer;</class>\n   </void>\n  </void>\n  <void property\="returnType">\n   <class>java.lang.Integer</class>\n  </void>\n  <void property\="testCases">\n   <void method\="add">\n    <object class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" id\="ProblemStatement$TestCase0">\n     <void class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" method\="getField">\n      <string>parameters</string>\n      <void method\="set">\n       <object idref\="ProblemStatement$TestCase0"/>\n       <array class\="java.lang.Object" length\="3">\n        <void index\="0">\n         <array class\="java.lang.Integer" length\="4">\n          <void index\="0">\n           <int>7</int>\n          </void>\n          <void index\="1">\n           <int>2</int>\n          </void>\n          <void index\="2">\n           <int>5</int>\n          </void>\n          <void index\="3">\n           <int>8</int>\n          </void>\n         </array>\n        </void>\n        <void index\="1">\n         <array class\="java.lang.Integer" length\="3">\n          <void index\="0">\n           <int>0</int>\n          </void>\n          <void index\="1">\n           <int>1</int>\n          </void>\n          <void index\="2">\n           <int>2</int>\n          </void>\n         </array>\n        </void>\n        <void index\="2">\n         <array class\="java.lang.Integer" length\="3">\n          <void index\="0">\n           <int>6</int>\n          </void>\n          <void index\="1">\n           <int>4</int>\n          </void>\n          <void index\="2">\n           <int>3</int>\n          </void>\n         </array>\n        </void>\n       </array>\n      </void>\n     </void>\n     <void class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" method\="getField">\n      <string>returnValue</string>\n      <void method\="set">\n       <object idref\="ProblemStatement$TestCase0"/>\n       <int>15</int>\n      </void>\n     </void>\n    </object>\n   </void>\n   <void method\="add">\n    <object class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" id\="ProblemStatement$TestCase1">\n     <void class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" method\="getField">\n      <string>parameters</string>\n      <void method\="set">\n       <object idref\="ProblemStatement$TestCase1"/>\n       <array class\="java.lang.Object" length\="3">\n        <void index\="0">\n         <array class\="java.lang.Integer" length\="4">\n          <void index\="0">\n           <int>100</int>\n          </void>\n          <void index\="1">\n           <int>5</int>\n          </void>\n          <void index\="2">\n           <int>9</int>\n          </void>\n          <void index\="3">\n           <int>8</int>\n          </void>\n         </array>\n        </void>\n        <void index\="1">\n         <array class\="java.lang.Integer" length\="3">\n          <void index\="0">\n           <int>0</int>\n          </void>\n          <void index\="1">\n           <int>0</int>\n          </void>\n          <void index\="2">\n           <int>0</int>\n          </void>\n         </array>\n        </void>\n        <void index\="2">\n         <array class\="java.lang.Integer" length\="3">\n          <void index\="0">\n           <int>6</int>\n          </void>\n          <void index\="1">\n           <int>2</int>\n          </void>\n          <void index\="2">\n           <int>2</int>\n          </void>\n         </array>\n        </void>\n       </array>\n      </void>\n     </void>\n     <void class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" method\="getField">\n      <string>returnValue</string>\n      <void method\="set">\n       <object idref\="ProblemStatement$TestCase1"/>\n       <int>32</int>\n      </void>\n     </void>\n    </object>\n   </void>\n   <void method\="add">\n    <object class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" id\="ProblemStatement$TestCase2">\n     <void class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" method\="getField">\n      <string>parameters</string>\n      <void method\="set">\n       <object idref\="ProblemStatement$TestCase2"/>\n       <array class\="java.lang.Object" length\="3">\n        <void index\="0">\n         <array class\="java.lang.Integer" length\="9">\n          <void index\="0">\n           <int>10</int>\n          </void>\n          <void index\="1">\n           <int>20</int>\n          </void>\n          <void index\="2">\n           <int>30</int>\n          </void>\n          <void index\="3">\n           <int>40</int>\n          </void>\n          <void index\="4">\n           <int>50</int>\n          </void>\n          <void index\="5">\n           <int>60</int>\n          </void>\n          <void index\="6">\n           <int>70</int>\n          </void>\n          <void index\="7">\n           <int>80</int>\n          </void>\n          <void index\="8">\n           <int>90</int>\n          </void>\n         </array>\n        </void>\n        <void index\="1">\n         <array class\="java.lang.Integer" length\="8">\n          <void index\="0">\n           <int>0</int>\n          </void>\n          <void index\="1">\n           <int>1</int>\n          </void>\n          <void index\="2">\n           <int>2</int>\n          </void>\n          <void index\="3">\n           <int>2</int>\n          </void>\n          <void index\="4">\n           <int>3</int>\n          </void>\n          <void index\="5">\n           <int>4</int>\n          </void>\n          <void index\="6">\n           <int>5</int>\n          </void>\n          <void index\="7">\n           <int>7</int>\n          </void>\n         </array>\n        </void>\n        <void index\="2">\n         <array class\="java.lang.Integer" length\="8">\n          <void index\="0">\n           <int>5</int>\n          </void>\n          <void index\="1">\n           <int>15</int>\n          </void>\n          <void index\="2">\n           <int>25</int>\n          </void>\n          <void index\="3">\n           <int>35</int>\n          </void>\n          <void index\="4">\n           <int>45</int>\n          </void>\n          <void index\="5">\n           <int>55</int>\n          </void>\n          <void index\="6">\n           <int>65</int>\n          </void>\n          <void index\="7">\n           <int>75</int>\n          </void>\n         </array>\n        </void>\n       </array>\n      </void>\n     </void>\n     <void class\="net.fornwall.eclipsecoder.stats.ProblemStatement$TestCase" method\="getField">\n      <string>returnValue</string>\n      <void method\="set">\n       <object idref\="ProblemStatement$TestCase2"/>\n       <int>205</int>\n      </void>\n     </void>\n    </object>\n   </void>\n  </void>\n </object>\n</java>\n
